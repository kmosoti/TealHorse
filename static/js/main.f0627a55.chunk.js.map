{"version":3,"sources":["parsing.js","CodeTranslate.js","images/TealHorse.png","App.js","index.js"],"names":["buildReactClass","elements","buildReactStyles","styles","CodeTranslate","useState","textInput","updateInput","textOutput","updateOutput","className","placeholder","rows","cols","onChange","e","target","value","spellCheck","onClick","tempTranslate","elementArray","juniorArray","stylesArray","arraylength","length","xmlToReact","XMLToReact","Example","attrs","type","props","Item","window","alert","i","console","log","localName","push","convert","reactElements","join","stylesOutput","concat","translateFunction","xmlString","xmlElements","androidDOM","DOMParser","parseFromString","activeElement","textContent","includes","nodeList","firstChild","childNodes","String","item","s","XMLSerializer","serializeToString","parserFunction","App","src","TealHorse","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOA2EMA,EAAkB,SAACC,GACrB,MAAM,mEAAN,OAGIA,EAHJ,+BAUEC,EAAmB,SAACC,GACxB,MAAM,mEAAN,OAEEA,EAFF,W,OCxDaC,MA3Bf,WAEE,MAAiCC,qBAAjC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAmCF,qBAAnC,mBAAOG,EAAP,KAAmBC,EAAnB,KAeA,OACE,sBAAKC,UAAU,OAAf,UACE,0BAAUC,YAAY,mCAAmCC,KAAK,KAAKC,KAAK,KAAKC,SAV7D,SAACC,GACnBR,EAAYQ,EAAEC,OAAOC,QASiFC,WAAW,UAC7G,wBAAQC,QAjBM,SAACJ,GACnB,IACIK,EDoB2B,SAACC,GAChC,IAAIC,EAAc,GACdC,EAAc,GACdC,EAAcH,EAAaI,OACzBC,EAAa,IAAIC,IAAW,CAChCC,QAAS,SAACC,GAAD,MAAY,CAAEC,KAAM,KAAMC,MAAOF,IAC1CG,KAAM,SAACH,GAAD,MAAY,CAAEC,KAAM,KAAMC,MAAOF,MAIzC,GAAoB,sBAAjBR,EAED,OADAY,OAAOC,MAAM,iBACN,gBAGP,IAAI,IAAIC,EAAI,EAAGA,EAAEX,EAAaW,IAC5BC,QAAQC,IAAIhB,EAAac,GAAGG,WAC5BhB,EAAYiB,KAAZ,qBAEGlB,EAAac,GAAGG,UAFnB,2BAE+CjB,EAAac,GAAGG,UAF/D,+DAIIjB,EAAac,GAAGG,UAJpB,gBAOAf,EAAYgB,KAAZ,oBAEElB,EAAac,GAAGG,UAFlB,mFASgBZ,EAAWc,QAAX,6DAAlB,IAKIC,EAAgBzC,EAAgBsB,EAAYoB,KAAK,KACjDC,EAAezC,EAAiBqB,EAAYmB,KAAK,KACrD,OAAOD,EAAcG,OAAO,KAAKD,GC5DfE,CDRM,SAACC,GAC3B,IAAIC,EAAc,GAEZC,GADO,IAAIC,WACSC,gBAAgBJ,EAAW,YAGrD,GAFAV,QAAQC,IAAIW,GAETA,EAAWG,cAAcC,aAAeJ,EAAWG,cAAcC,YAAYC,SAAS,qBAEvF,OADAjB,QAAQC,IAAIW,EAAWG,cAAcC,aAC9B,oBAIT,IAAME,EAAWN,EAAWO,WAAWC,WAGvCpB,QAAQC,IAAIiB,GACZ,IAAI,IAAInB,EAAI,EAAGA,EAAImB,EAAS7B,OAAQU,IAEF,kBAA7BsB,OAAOH,EAASI,KAAKvB,KAAyBY,EAAYR,KAAKe,EAASI,KAAKvB,IAKlF,IAAIwB,EAAI,IAAIC,cAEZ,OADAxB,QAAQC,IAAIsB,EAAEE,kBAAkBd,EAAY,KACrCA,EClBSe,CAAexD,IAE/BG,EAAagD,OAAOrC,KAchB,uBAEF,0BAAUT,YAAY,8BAA8BC,KAAK,KAAKC,KAAK,KAAKI,MAAOT,EAAYU,WAAW,cC3B7F,MAA0B,sCCgB1B6C,MAZf,WACE,OACE,sBAAKrD,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKsD,IAAKC,EAAWvD,UAAU,WAAWwD,IAAI,SAC9C,uDAEF,cAAC,EAAD,QCNNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f0627a55.chunk.js","sourcesContent":["import XMLToReact from '@condenast/xml-to-react';\r\n\r\nexport const parserFunction = (xmlString) => {\r\n    let xmlElements = []\r\n    let parser = new DOMParser();\r\n    const androidDOM = parser.parseFromString(xmlString, \"text/xml\");\r\n    console.log(androidDOM);\r\n    //Code checks if their is an error in the code you've entered\r\n    if(androidDOM.activeElement.textContent && androidDOM.activeElement.textContent.includes(\"XML Parsing Error\")){\r\n      console.log(androidDOM.activeElement.textContent);\r\n      return \"XML Parsing Error\"\r\n    }\r\n\r\n    //Grabs the lists of parsed elements \r\n    const nodeList = androidDOM.firstChild.childNodes;\r\n    //console.log(String(nodeList.item(0)) === '[object Text]');\r\n\r\n    console.log(nodeList)\r\n    for(var i = 0; i < nodeList.length; i++ ){\r\n      //Loops through the parsed elements and grabs what is usable and appends it to the array of xmlElements\r\n      if(String(nodeList.item(i)) !== '[object Text]') xmlElements.push(nodeList.item(i));\r\n    }\r\n    //console.log(String(xmlElements[0].outerHTML));\r\n    \r\n    //Returns a string containing each element seperated by two new line characters\r\n    var s = new XMLSerializer();\r\n    console.log(s.serializeToString(xmlElements[0]))\r\n    return xmlElements\r\n  }\r\n\r\n  export const translateFunction = (elementArray) => {\r\n    let juniorArray = []\r\n    let stylesArray = []\r\n    var arraylength = elementArray.length\r\n    const xmlToReact = new XMLToReact({\r\n      Example: (attrs) => ({ type: 'ul', props: attrs }),\r\n      Item: (attrs) => ({ type: 'li', props: attrs })\r\n    });\r\n    \r\n\r\n    if(elementArray === 'XML Parsing Error'){\r\n      window.alert('Invalid Entry')\r\n      return 'Invalid Entry'\r\n    }\r\n    else{\r\n      for(let i = 0; i<arraylength; i++){\r\n        console.log(elementArray[i].localName)\r\n        juniorArray.push(\r\n        `\r\n        <${elementArray[i].localName} styles={styles.${elementArray[i].localName}}>\r\n          Lorem ipsum dolor sit amet\r\n        </${elementArray[i].localName}>\r\n        `\r\n        )\r\n        stylesArray.push(\r\n        `\r\n        ${elementArray[i].localName} : {\r\n          flex: 1,\r\n          alightItmes: 'center'\r\n        }\r\n        `\r\n        )\r\n      }\r\n      const reactTree = xmlToReact.convert(`\r\n      <Example name=\"simple\">\r\n      </Example>\r\n      `);\r\n      \r\n      let reactElements = buildReactClass(juniorArray.join(\"\"))\r\n      let stylesOutput = buildReactStyles(stylesArray.join(\"\"))  \r\n      return reactElements.concat(\"\\n\",stylesOutput)\r\n      //return elementArray.join(\"\\n\\n\");\r\n    }\r\n  }\r\n\r\nconst buildReactClass = (elements) => {\r\n    return `const OutPutClassFunction = () =>{\r\n  return(\r\n    <div>\r\n      ${elements}\r\n    </div>\r\n  )\r\n}\r\n    `\r\n}\r\n\r\nconst buildReactStyles = (styles) => {\r\n  return `\\\\\\\\React Native Styling\r\ncosnt styles = StyleSheet.create({\r\n  ${styles}\r\n})\r\n`\r\n}\r\nconst myConverter = (attributes) => {\r\n    return {\r\n      type: 'div',\r\n      props: {\r\n        className: 'test'\r\n      }\r\n    }\r\n  }\r\n\r\n  export const sampleXML = () => {\r\n      return `\r\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n        xmlns:tools=\"http://schemas.android.com/tools\"\r\n        android:id=\"@+id/container\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:paddingLeft=\"@dimen/activity_horizontal_margin\"\r\n        android:paddingTop=\"@dimen/activity_vertical_margin\"\r\n        android:paddingRight=\"@dimen/activity_horizontal_margin\"\r\n        android:paddingBottom=\"@dimen/activity_vertical_margin\"\r\n        tools:context=\".ui.login.LoginActivity\">\r\n    \r\n        <EditText\r\n            android:id=\"@+id/username\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"96dp\"\r\n            android:hint=\"@string/prompt_email\"\r\n            android:inputType=\"textEmailAddress\"\r\n            android:selectAllOnFocus=\"true\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n        <EditText\r\n            android:id=\"@+id/password\"\r\n            android:layout_width=\"0dp\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginTop=\"8dp\"\r\n            android:hint=\"@string/prompt_password\"\r\n            android:imeActionLabel=\"@string/action_sign_in_short\"\r\n            android:imeOptions=\"actionDone\"\r\n            android:inputType=\"textPassword\"\r\n            android:selectAllOnFocus=\"true\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/username\" />\r\n    \r\n        <Button\r\n            android:id=\"@+id/login\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"start\"\r\n            android:layout_marginTop=\"16dp\"\r\n            android:layout_marginBottom=\"64dp\"\r\n            android:enabled=\"false\"\r\n            android:text=\"@string/action_sign_in\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"parent\"\r\n            app:layout_constraintStart_toStartOf=\"parent\"\r\n            app:layout_constraintTop_toBottomOf=\"@+id/password\"\r\n            app:layout_constraintVertical_bias=\"0.2\" />\r\n    \r\n        <ProgressBar\r\n            android:id=\"@+id/loading\"\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_gravity=\"center\"\r\n            android:layout_marginTop=\"64dp\"\r\n            android:layout_marginBottom=\"64dp\"\r\n            android:visibility=\"gone\"\r\n            app:layout_constraintBottom_toBottomOf=\"parent\"\r\n            app:layout_constraintEnd_toEndOf=\"@+id/password\"\r\n            app:layout_constraintStart_toStartOf=\"@+id/password\"\r\n            app:layout_constraintTop_toTopOf=\"parent\"\r\n            app:layout_constraintVertical_bias=\"0.3\" />\r\n    \r\n    </androidx.constraintlayout.widget.ConstraintLayout>\r\n      `\r\n  }","import React, {useState} from 'react'\r\nimport {parserFunction,sampleXML,translateFunction} from './parsing.js'\r\n\r\n\r\nfunction CodeTranslate(){\r\n  // Declare State Variables for input/output functionality\r\n  const [textInput, updateInput] = useState();\r\n  const [textOutput, updateOutput] = useState();\r\n  const handleClick = (e) => {\r\n    let tempParse = parserFunction(textInput);\r\n    let tempTranslate = translateFunction(tempParse);\r\n    updateOutput(String(tempTranslate));\r\n    //console.log(textOutput);\r\n  }\r\n  const handleInput = (e) => {\r\n    updateInput(e.target.value)\r\n  }\r\n  const handleTest = (e) => {\r\n    console.log(sampleXML())\r\n    updateInput(sampleXML());\r\n  }\r\n\r\n  return(\r\n    <div className=\"main\">\r\n      <textarea placeholder=\"Enter Android XML layout Code...\" rows=\"35\" cols=\"70\" onChange={handleInput} spellCheck=\"false\"/>\r\n        <button onClick={handleClick}>Translate</button>\r\n        {/* <button onClick={handleTest}>Test</button> */}\r\n      <textarea placeholder=\"React Native Code Output...\" rows=\"35\" cols=\"70\" value={textOutput} spellCheck=\"false\"/>\r\n    </div>\r\n  );\r\n}\r\nexport default CodeTranslate;","export default __webpack_public_path__ + \"static/media/TealHorse.49b00fda.png\";","import './App.css';\r\nimport CodeTranslate from './CodeTranslate.js'\r\nimport TealHorse from './images/TealHorse.png'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={TealHorse} className=\"App-logo\" alt=\"logo\"/>\r\n        <h3>Project Teal Horse</h3>\r\n      </header>\r\n      <CodeTranslate/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}
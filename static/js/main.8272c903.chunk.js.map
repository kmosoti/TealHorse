{"version":3,"sources":["parsing.js","CodeTranslate.js","images/TealHorse.png","App.js","index.js"],"names":["buildReactClass","elements","getReactAttributes","elementAttributes","translatedAttributes","i","length","supportedElementAttributes","includes","localName","push","supportedLayoutParameters","nodeValue","join","buildReactStyles","androidLayout","styles","supportLayoutAttributes","supportedElements","equivalentComponents","CodeTranslate","useState","textInput","updateInput","textOutput","updateOutput","className","placeholder","rows","cols","onChange","e","target","value","spellCheck","onClick","tempTranslate","elementArray","juniorArray","stylesArray","arraylength","androidLayoutAttributes","window","alert","console","log","toLowerCase","androidElement","attributes","reactElements","stylesOutput","concat","translateFunction","xmlString","xmlElements","androidDOM","DOMParser","parseFromString","activeElement","textContent","nodeList","firstChild","childNodes","layoutAttributes","layoutDesc","nodeName","String","item","parserFunction","App","src","TealHorse","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8272c903.chunk.js","sourcesContent":["// import XMLToReact from '@condenast/xml-to-react';\r\n\r\nexport const  parserFunction = (xmlString) => {\r\n    let xmlElements = []\r\n    let parser = new DOMParser();\r\n    const androidDOM = parser.parseFromString(xmlString, \"text/xml\");\r\n    //console.log(androidDOM.activeElement);\r\n    //Code checks if their is an error in the code you've entered\r\n    if(androidDOM.activeElement.textContent && androidDOM.activeElement.textContent.includes(\"XML Parsing Error\")){\r\n      //console.log(androidDOM.activeElement.textContent);\r\n      return \"XML Parsing Error\"\r\n    }\r\n    //Grabs the lists of parsed elements \r\n    const nodeList = androidDOM.firstChild.childNodes;\r\n    const layoutAttributes = []\r\n    //console.log(androidDOM.activeElement.attributes)\r\n    for(let i = 0; i < androidDOM.activeElement.attributes.length; i++){\r\n      // if(supportLayoutAttributes.includes(node.localName))\r\n      //console.log(androidDOM.activeElement.attributes[i])\r\n      if(supportLayoutAttributes.includes(androidDOM.activeElement.attributes[i].localName)){\r\n        layoutAttributes.push(androidDOM.activeElement.attributes[i])\r\n      }\r\n    }\r\n    const layoutDesc = [androidDOM.activeElement.nodeName,layoutAttributes ]\r\n    //console.log(layoutAttributes)\r\n    //console.log(nodeList)\r\n    for(let i = 0; i < nodeList.length; i++ ){\r\n      //Loops through the parsed elements and grabs what is usable and appends it to the array of xmlElements\r\n      if(String(nodeList.item(i)) !== '[object Text]') xmlElements.push(nodeList.item(i));\r\n    }\r\n    return [layoutDesc, xmlElements]\r\n}\r\n\r\n  export const translateFunction = (elementArray) => {\r\n    /// Element Array [layout name, layout attributes]\r\n    let juniorArray = []\r\n    let stylesArray = []\r\n    var arraylength = elementArray[1].length\r\n    const androidLayout = elementArray[0][0]\r\n    const androidLayoutAttributes = []\r\n\r\n    for( let i = 0; i < elementArray[0][1].length; i++){\r\n      //console.log(elementArray[0][1][i])\r\n      androidLayoutAttributes.push(elementArray[0][1][i])\r\n    }\r\n\r\n    if(elementArray[1] === 'XML Parsing Error'){\r\n      window.alert('Invalid Entry')\r\n      return 'Invalid Entry'\r\n    }\r\n    else{\r\n      for(let i = 0; i<arraylength; i++){\r\n        console.log(elementArray[1][i].localName.toLowerCase())\r\n        if(supportedElements.includes(elementArray[1][i].localName.toLowerCase())){\r\n          const androidElement = elementArray[1][i].localName.toLowerCase()\r\n          juniorArray.push(\r\n          `\r\n          <${equivalentComponents[androidElement]} styles={styles.${elementArray[1][i].localName}}>\r\n            Lorem ipsum dolor sit amet\r\n          </${equivalentComponents[androidElement]}>\r\n        `)\r\n        }\r\n        else{\r\n          juniorArray.push(\r\n            `\r\n            {/*<${elementArray[1][i].localName} styles={styles.${elementArray[1][i].localName}}>\r\n              Lorem ipsum dolor sit amet\r\n          </${elementArray[1][i].localName}>*/}\r\n          `)\r\n        }\r\n        stylesArray.push(\r\n        `\r\n        ${elementArray[1][i].localName} : {\r\n          ${getReactAttributes(elementArray[1][i].attributes)}\r\n        }\r\n        `\r\n        )\r\n      }\r\n      let reactElements = buildReactClass(juniorArray.join(\"\"))\r\n      //console.log(\"AndroidLayout: \"+androidLayoutAttributes)\r\n      let stylesOutput = buildReactStyles(androidLayoutAttributes, stylesArray.join(\",\"))  \r\n      return reactElements.concat(\"\\n\",stylesOutput)\r\n    }\r\n  }\r\n\r\nconst buildReactClass = (elements) => {\r\n    return `import {StyleSheet} from \"react-native\"\\nimport React from 'react';\r\n    \r\nconst OutPutClassFunction = () =>{\r\n  return(\r\n    <div styles={styles.container}>\r\n      ${elements}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default OutPutClassFunction\r\n      `\r\n}\r\n\r\nconst getReactAttributes = (elementAttributes) => {\r\n  let translatedAttributes = []\r\n  for(let i = 0; i < elementAttributes.length; i++){\r\n   //console.log(elementAttributes[i].localName)\r\n    if(supportedElementAttributes.includes(elementAttributes[i].localName)){\r\n      //console.log(elementAttributes[i].localName)\r\n      //console.log(supportedLayoutParameters[elementAttributes[i].localName])\r\n      translatedAttributes.push(`${supportedLayoutParameters[elementAttributes[i].localName]}:\"${elementAttributes[i].nodeValue}\"`\r\n        )\r\n    }\r\n  }\r\n  //onsole.log(elementAttributes)\r\n  return translatedAttributes.join(',\\n\\t  ')\r\n}\r\n\r\nconst buildReactStyles = (androidLayout, styles) => {\r\n\r\n  return `//React Native Styling\r\nconst styles = StyleSheet.create({\r\n  \\tcontainer : { \r\n\\t  ${getReactAttributes(androidLayout)}\r\n  \\t},${styles}\r\n})\r\n`\r\n}\r\n\r\nconst supportLayoutAttributes = ['layout_width', 'layout_height', 'paddingLeft', 'paddingTop', 'paddingRight', 'paddingBottom','padding']\r\nconst supportedElementAttributes = [\r\n  'layout_width', \r\n  'layout_height', \r\n  'paddingLeft', \r\n  'paddingTop', \r\n  'paddingRight', \r\n  'paddingBottom',\r\n  'padding', \r\n  'layout_margin', \r\n  'layout_marginTop', \r\n  'layout_marginBottom', \r\n  'layout_marginLeft',\r\n  'layout_marginRight'\r\n]\r\n\r\nconst supportedLayoutParameters =  {\r\n  'layout_width': 'width',\r\n  'layout_height': 'height',\r\n  'padding': 'margin',\r\n  'paddingLeft': 'marginLeft',\r\n  'paddingRight': 'marginRight',\r\n  'paddingTop': 'marginTop',\r\n  'paddingBottom': 'marginBottom',\r\n  'layout_margin': 'margin',\r\n  'layout_marginLeft': 'marginLeft',\r\n  'layout_marginRight': 'marginRight',\r\n  'layout_marginTop': 'marginTop',\r\n  'layout_marginBottom': 'marginBottom'\r\n\r\n}\r\n\r\nconst supportedElements = ['button', 'edittext']\r\n\r\nconst equivalentComponents = {\r\n  'button':'button',\r\n  'edittext':'textarea'\r\n}","import React, {useState} from 'react'\r\nimport {parserFunction,translateFunction} from './parsing.js'\r\n\r\n\r\nfunction CodeTranslate(){\r\n  // Declare State Variables for input/output functionality\r\n  const [textInput, updateInput] = useState();\r\n  const [textOutput, updateOutput] = useState();\r\n  const handleClick = (e) => {\r\n    let tempParse = parserFunction(textInput);\r\n    let tempTranslate = translateFunction(tempParse);\r\n    updateOutput(String(tempTranslate));\r\n    //console.log(textOutput);\r\n  }\r\n  const handleInput = (e) => {\r\n    updateInput(e.target.value)\r\n  }\r\n  // const handleTest = (e) => {\r\n  //   console.log(sampleXML())\r\n  //   updateInput(sampleXML());\r\n  // }\r\n\r\n  return(\r\n    <div className=\"main\">\r\n      <textarea placeholder=\"Enter Android XML layout Code...\" rows=\"35\" cols=\"70\" onChange={handleInput} spellCheck=\"false\"/>\r\n        <button onClick={handleClick}>Translate</button>\r\n        {/* <button onClick={handleTest}>Test</button> */}\r\n      <textarea placeholder=\"React Native Code Output...\" rows=\"35\" cols=\"70\" value={textOutput} spellCheck=\"false\"/>\r\n    </div>\r\n  );\r\n}\r\nexport default CodeTranslate;","export default __webpack_public_path__ + \"static/media/TealHorse.49b00fda.png\";","import './App.css';\r\nimport CodeTranslate from './CodeTranslate.js'\r\nimport TealHorse from './images/TealHorse.png'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={TealHorse} className=\"App-logo\" alt=\"logo\"/>\r\n        <h3>Project Teal Horse</h3>\r\n      </header>\r\n      <CodeTranslate/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}